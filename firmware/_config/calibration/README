Calibration routine for the MPW-two Caravel chips.
--------------------------------------------------
This calibration routine consists of two parts:

1. calibration.hex  runs on the Caravel development board.

2. calibration.py  runs on the Nucleo board.

Make sure the Caravel development board is mounted on
the Nucleo board.

Use "make" to generate the hex file.

Use "[sudo] make flash_nucleo" to write the hex file to the
Caravel development board SPI flash.

Once flashed, the program starts running and waits for
handshaking input from the Nucleo board.

Start "mpremote" to get the micropython prompt on the
Nucleo board, then type:

	from calibration import *
	calibrate()

This completes the handshaking, and the calibration runs,
taking about 1 second or less.  A list of channels with
dependent hold violations is returned, that can be used
to generate a configuration for any required setup for
a program running on the Caravel board.

====================================================

To use the result in a program:

Retain the hex values for DEP_R and DEP_L from the
calibration result.

Generate a program to run on the Caravel processor.
Set the register values as if there were no
calibration required.  Then, at the top of the
program, add the definitions for DEP_R and DEP_L
and then include the file "runtime.c" found in this
directory (values for DEP_R and DEP_L can also be
passed on the compile command line with the -D
option).

In place of the configuration loading sequence

	reg_mprj_xfer = 1;
	while (reg_mprj_xfer == 1);

instead call

	configure_io();

The configure_io() subroutine will use the values of
DEP_R and DEP_L to rewrite the configuration words to
account for the independent and dependent hold
violations in the chip, program the GPIO, and return
the configuration to the original state.

====================================================

An auxiliary program called "calibration_pretest.c"
simulates the calibration method on a host computer
and prints diagnostic output.  It was used for
development of the method and is not part of the
calibration process itself.  For reference, it can
be run with

	cc -g -o calibration_pretest calibration_pretest.c
	./calibration_pretest

The pretest runs with an example distribution of
hold violations from one of the MPW-two chips.
